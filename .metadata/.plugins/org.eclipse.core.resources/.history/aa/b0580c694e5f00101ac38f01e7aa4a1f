package com.clinic.appointment_service.service;

import com.clinic.appointment_service.dto.AppointmentDTO;
import com.clinic.appointment_service.model.Appointment;
import com.clinic.appointment_service.repository.AppointmentRepository;

import feign.FeignException;

import com.clinic.appointment_service.client.DoctorClient;
import com.clinic.appointment_service.client.PatientClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AppointmentService {

	@Autowired
	private AppointmentRepository repository;

	@Autowired
	private PatientClient patientClient; // Feign client za PatientService

	@Autowired
	private DoctorClient doctorClient; // Feign client za DoctorService

	public List<AppointmentDTO> findAllAppointments() {
		return repository.findAll().stream().map(this::convertToDTO).collect(Collectors.toList());
	}

	public Optional<Appointment> findById(Long id) {
		return repository.findById(id);
	}

	public Appointment save(Appointment appointment) {
		return repository.save(appointment);
	}

	public Appointment update(Long id, Appointment appointment) {
		return repository.findById(id).map(existing -> {
			existing.setAppointmentDateTime(appointment.getAppointmentDateTime());
			existing.setPatientId(appointment.getPatientId());
			existing.setDoctorId(appointment.getDoctorId());
			return repository.save(existing);
		}).orElseThrow(() -> new RuntimeException("Appointment not found"));
	}

	public void delete(Long id) {
		repository.deleteById(id);
	}

	public ResponseEntity<String> getPatientName(Long patientId) {
		return patientClient.getPatientName(patientId);
	}

	public ResponseEntity<String> getDoctorName(Long doctorId) {
		return doctorClient.getDoctorName(doctorId);
	}

	public AppointmentDTO convertToDTO(Appointment appointment) {
		AppointmentDTO dto = new AppointmentDTO();
		dto.setId(appointment.getId());
		dto.setAppointmentTime(appointment.getAppointmentDateTime());
		dto.setStatus(appointment.getStatus());

		try {
			String patientName = patientClient.getPatientName(appointment.getPatientId()).getBody();
			dto.setPatientName(patientName);
		} catch (FeignException.NotFound e) {
			dto.setPatientName("Unknown Patient");
		}

		try {
			String doctorName = doctorClient.getDoctorName(appointment.getDoctorId()).getBody();
			dto.setDoctorName(doctorName);
		} catch (FeignException.NotFound e) {
			dto.setDoctorName("Unknown Doctor");
		}

		return dto;
	}


	public Appointment createAppointment(AppointmentRequest request) {
	    // Proveri da li postoji pacijent
	    try {
	        patientClient.getPatientById(request.getPatientId());
	    } catch (FeignException.NotFound e) {
	        throw new IllegalArgumentException("Pacijent sa ID " + request.getPatientId() + " ne postoji.");
	    }

	    // Proveri da li postoji doktor
	    try {
	        doctorClient.getDoctorById(request.getDoctorId());
	    } catch (FeignException.NotFound e) {
	        throw new IllegalArgumentException("Doktor sa ID " + request.getDoctorId() + " ne postoji.");
	    }

	    // Kreiraj appointment ako sve postoji
	    Appointment appointment = new Appointment();
	    appointment.setDoctorId(request.getDoctorId());
	    appointment.setPatientId(request.getPatientId());

	    return repository.save(appointment);
	}

}
